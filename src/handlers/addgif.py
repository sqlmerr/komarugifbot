from loguru import logger

from aiogram import Router, F
from aiogram.types import Message, CallbackQuery
from aiogram.filters import Command
from aiogram.fsm.context import FSMContext

from src.db import User, Gif, get_last_gif_id
from src.utils import AddGif, inline_builder, Reason
from src import admin

router = Router()


@router.message(Command("addgif"))
async def addgif_cmd(message: Message, state: FSMContext):
    await state.clear()
    
    await message.reply("<b>‚ú® –û—Ç–ø—Ä–∞–≤—å—Ç–µ –≥–∏—Ñ, –∫–æ—Ç–æ—Ä—É—é —Ö–æ—Ç–∏—Ç–µ –¥–æ–±–∞–≤–∏—Ç—å –≤ –±–∞–∑—É:</b>")
    
    await state.set_state(AddGif.gif)


@router.message(AddGif.gif, F.animation)
async def addgif_gif(message: Message, state: FSMContext):
    await state.update_data({"gif": message.animation.file_id})

    await message.reply("<b>–û—Ç–ª–∏—á–Ω–æ, —Ç–µ–ø–µ—Ä—å –æ—Ç–ø—Ä–∞–≤—å—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ. –û–Ω–æ –Ω–µ –¥–æ–ª–∂–Ω–æ –ø—Ä–µ–≤—ã—à–∞—Ç—å 32 —Å–∏–º–≤–æ–ª–∞!</b>")
    await state.set_state(AddGif.title)


@router.message(AddGif.title, F.text)
async def addgif_title(message: Message, state: FSMContext):
    if len(message.text) > 32:
        await message.reply("<b>–ù–∞–∑–≤–∞–Ω–∏–µ –≥–∏—Ñ–∫–∏ –Ω–µ –¥–æ–ª–∂–Ω–æ –ø—Ä–µ–≤—ã—à–∞—Ç—å 32 —Å–∏–º–≤–æ–ª–∞!</b>")
        return
    if await Gif.find_one(Gif.title == message.text):
        await message.reply("<b>–ì–∏—Ñ —Å —Ç–∞–∫–∏–º –Ω–∞–∑–≤–∞–Ω–∏–µ–º —É–∂–µ –µ—Å—Ç—å –≤ –±–∞–∑–µ!</b>")
        return
    
    await state.update_data({"title": message.text})
    await message.reply(
        "<b>–°—É–ø–µ—Ä, —Ç–µ–ø–µ—Ä—å –æ—Ç–ø—Ä–∞–≤—å—Ç–µ –æ–ø–∏—Å–∞–Ω–∏–µ. –û–Ω–æ –Ω–µ –¥–æ–ª–∂–Ω–æ –ø—Ä–µ–≤—ã—à–∞—Ç—å 256 —Å–∏–º–≤–æ–ª–æ–≤. (–ï—Å–ª–∏ –Ω–µ —Ö–æ—Ç–∏—Ç–µ, –Ω–∞–∂–º–∏—Ç–µ –∫–Ω–æ–ø–∫—É –Ω–∏–∂–µ)</b>",
        reply_markup=inline_builder(["–ø—Ä–æ–ø—É—Å—Ç–∏—Ç—å", "skip"])
    )
    await state.set_state(AddGif.description)


@router.message(AddGif.description, F.text)
async def addgif_description(message: Message, state: FSMContext):
    if len(message.text) > 256:
        await message.reply("<b>–û–ø–∏—Å–∞–Ω–∏–µ –≥–∏—Ñ–∫–∏ –Ω–µ –¥–æ–ª–∂–Ω–æ –ø—Ä–µ–≤—ã—à–∞—Ç—å 256 —Å–∏–º–≤–æ–ª–æ–≤!</b>")
        return
    
    await state.update_data({"description": message.text})
    await state.set_state(AddGif.end)
    await send_end(message, state)


@router.callback_query(AddGif.description, F.data == "skip")
async def addgif_skip(call: CallbackQuery, state: FSMContext):
    await state.update_data({"description": ""})
    await state.set_state(AddGif.end)
    await call.answer()
    await send_end(call.message, state)

    
async def send_end(message: Message, state: FSMContext):
    if await state.get_state() != AddGif.end:
        return
    
    data = await state.get_data()
    text = (
        "üçå <b>–í–∞—à–∞ –≥–∏—Ñ:</b>\n\n"
        f"<i>–ù–∞–∑–≤–∞–Ω–∏–µ: </i> {data['title']}\n"
        f"<i>–û–ø–∏—Å–∞–Ω–∏–µ: </i> {data['description']}\n\n"
        "<b><i>–û—Ç–ø—Ä–∞–≤–ª—è—Ç—å –∞–¥–º–∏–Ω–∞–º –Ω–∞ –ø—Ä–æ–≤–µ—Ä–∫—É?</i></b>"
    )
    await message.answer_animation(
        data["gif"],
        caption=text,
        reply_markup=inline_builder(["–û—Ç–ø—Ä–∞–≤–ª—è–µ–º", "send_to_admins"])
    )
    

@router.callback_query(AddGif.end, F.data == "send_to_admins")
async def send_to_admins(call: CallbackQuery, user: User, state: FSMContext):
    data = await state.get_data()
    gif = Gif(
        user=user,
        gif_id=(await get_last_gif_id()) + 1,
        file_id=data["gif"],
        title=data["title"],
        description=data["description"]
    )
    await gif.insert()
    
    caption = (
        f"üçå <b>–ì–∏—Ñ –æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user.user_id}:</b>\n\n"
        f"<i>–ù–∞–∑–≤–∞–Ω–∏–µ: </i> {data['title']}\n"
        f"<i>–û–ø–∏—Å–∞–Ω–∏–µ: </i> {data['description']}\n\n"
    )
    
    bot = call.bot
    await bot.send_animation(
        chat_id=admin,
        animation=gif.file_id,
        caption=caption,
        reply_markup=inline_builder(
            ["–ü—Ä–∏–Ω—è—Ç—å", f"accept_gif:{gif.gif_id}:yes"],
            ["–û—Ç–∫–ª–æ–Ω–∏—Ç—å", f"accept_gif:{gif.gif_id}:no"]
        )
    )
    
    await state.clear()
    await call.message.edit_reply_markup(reply_markup=None)
    await call.message.answer("<b>–ì–∏—Ñ —É—Å–ø–µ—à–Ω–æ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–∞ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ü–∏–∏!</b>")



@router.callback_query(F.data.startswith("accept_gif:"), F.from_user.id.in_([admin]))
async def accept_gif_call(call: CallbackQuery, state: FSMContext):
    gif = await Gif.find_one(Gif.gif_id == int(call.data.split(":")[1]), fetch_links=True)
    if not gif:
        print(gif)
        await call.answer()
        return
    
    action = call.data.split(":")[2]
    
    await call.answer()
    if action == "yes":
        gif.verified = True
        await gif.save()
        await call.bot.send_message(gif.user.user_id, f"<b>–í–∞—à—É –≥–∏—Ñ —Å –Ω–∞–∑–≤–∞–Ω–∏–µ–º </b><code>{gif.title}</code><b> —É—Å–ø–µ—à–Ω–æ –ø—Ä–∏–Ω—è–ª–∏. –¢–µ–ø–µ—Ä—å –æ–Ω–∞ –µ—Å—Ç—å –≤ /catalog</b>")
        await call.message.edit_reply_markup(reply_markup=None)
    elif action == "no":
        await call.message.answer("<i>–í–≤–µ–¥–∏—Ç–µ –ø—Ä–∏—á–∏–Ω—É:</i>")
        await state.clear()
        await state.set_data({"gif_id": gif.gif_id})
        await state.set_state(Reason.reason)


@router.message(Reason.reason, F.text)
async def accept_gif_no(message: Message, state: FSMContext):
    data = await state.get_data()
    gif =  await Gif.find_one(Gif.gif_id == data["gif_id"], fetch_links=True)
    reason = message.text
    
    await gif.delete()
    await message.bot.send_message(
        gif.user.user_id, 
        f"<b>–ö —Å–æ–∂–∞–ª–µ–Ω–∏—é, –≤–∞—à—É –≥–∏—Ñ —Å –Ω–∞–∑–≤–∞–Ω–∏–µ–º {gif.title} –Ω–µ –ø—Ä–∏–Ω—è–ª–∏ :(</b>\n\n–ü—Ä–∏—á–∏–Ω–∞: {reason}"
    )
    await message.reply("‚úÖ <b>–£—Å–ø–µ—à–Ω–æ</b>")
    await state.clear()
